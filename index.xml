<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Top on Reinventing Square Wheels</title>
    <link>https://algon-320.github.io/</link>
    <description>Recent content in Top on Reinventing Square Wheels</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 18 May 2022 17:39:25 +0900</lastBuildDate><atom:link href="https://algon-320.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rustのunitみたいな型</title>
      <link>https://algon-320.github.io/posts/rust-unit-like/</link>
      <pubDate>Wed, 18 May 2022 17:39:25 +0900</pubDate>
      
      <guid>https://algon-320.github.io/posts/rust-unit-like/</guid>
      <description>unitっぽい型について書きます。
unit型 Rustにはただ一つの値だけをもつunit型があります。 結果を返さない関数の戻り値の型として登場します。 型名・値どちらも()と書きます。
unit-like構造体 「フィールドを持たない構造体」を独自に定義してunitのように使うこともできます。 このような構造体はunit-like structと呼ばれることがあります。 トレイトを実装したりメソッドを追加できる点でunit型と異なります。
1struct Unitlike1;2struct Unitlike2();3struct Unitlike3{}45fn foo(_: Unitlike1){}67fn main(){8letu1: Unitlike1=Unitlike1;9letu2: Unitlike2=Unitlike2();10letu3: Unitlike3=Unitlike3{};1112foo(u1);// OK 13// foo(u2); // Error 14// foo(()); // Error 15}上の例では3つの構造体を定義していますが、これらは互いに異なる型になります。 当たり前ですが、Unitlike1の値を引数にとる関数にUnitlike2や()を渡すことはできません。
ちなみにUnilike2のようにタプル構造体の形式で定義すると、 「コンストラクタの関数ポインタ」を得ることができるようです。 enumのタプル形式のバリアントでも同様にコンストラクタを得ることができ、たまに役に立ちます。
1struct Unitlike2();23fn main(){4letu2_ctor: fn()-&amp;gt; Unitlike2=Unitlike2;5letu2: Unitlike2=u2_ctor();6}unitを含む構造体 更に似たような構造体として「unit型の値のみを持つ構造体」があります。
1struct Unitlike4(());23fn main(){4letu4=Unitlike4(());5}Unitlike4はUnitlike2と似ていますが、コンストラクタが公開されない点が異なります。 別のモジュールで定義されている場合、pub structとして型自体が公開されていても、 外部からUnitlike4の値を作ることはできません。
1mod unit{2pubstruct Unitlike2();34pubstruct Unitlike4(());5pubfn new_u4()-&amp;gt; Unitlike4{6Unitlike4(())7}89pubstruct Unitlike5(pub());10}1112fn main(){13letu2=unit::Unitlike2();// OK 14// let u4 = unit::Unitlike4(()); // Error 15letu4=unit::new_u4();// OK 16letu5=unit::Unitlike5(());// OK 17}Unitlike5のようにフィールドをpubにすれば、 モジュールの外部から作ることができるようになります。
あえてUnitlike4のようにコンストラクタを隠して定義し、 意図的にCloneトレイトを実装しないことで、 事前条件を静的にチェックするような使い方ができそうです。</description>
    </item>
    
    <item>
      <title>vimdiffの謎</title>
      <link>https://algon-320.github.io/posts/vimdiff-behavior/</link>
      <pubDate>Fri, 18 Feb 2022 16:07:00 +0900</pubDate>
      
      <guid>https://algon-320.github.io/posts/vimdiff-behavior/</guid>
      <description>ファイルの差分を確認するためのコマンドとしてdiffコマンドがありますが、 vimのインタフェースを用いて差分を確認できるvimdiffというコマンドもあります。
$ vimdiff a.txt b.txt のように使います。 vimdiffはdiffよりも見やすくて便利なのでよく使っています。
ある日、ふとvimdiffの実体が気になって確認してみると、 /usr/bin/vimへのシンボリックリンクになっていることに気がつきました。
$ type vimdiff vimdiff is /usr/bin/vimdiff $ ls -l /usr/bin/vimdiff lrwxrwxrwx 1 root root 3 Jan 16 21:09 /usr/bin/vimdiff -&amp;gt; vim* vimには-dというオプションがあり、このオプションを渡すとvimdiffと同じように差分表示モードで起動します。 vimdiffはvim -dをラップしているスクリプトファイルか何かかと予想していたのですが、 実体はvimへのシンボリックリンクでした。
そうなるとvimdiffとvimは何が違うんだと疑問に思うのですが、
$ vim a.txt b.txt と
$ vimdiff a.txt b.txt は明らかに挙動が異なります。 シンボリックリンクに「特定のオプションを追加して起動する」なんていう機能は存在しないよなあと 思いつつ調べてみると、stackoverflowに同じ全く同じ質問が見つかりました。
https://stackoverflow.com/questions/8876323/how-does-the-softlink-vimdiff-be-implemented
結局これはどういう仕組みなのかというと、 vimがargv[0]を見て挙動を変えているということでした。
C言語でユーザプログラムを書く際に、main関数の引数としてargvをとることができます。 普通、シェルはargv[0]に実行ファイルの名前を設定し、argv[1]以降にコマンドライン引数を格納します。 実行ファイルへのシンボリックリンクの場合、argv[0]にはシンボリックリンクの名前が渡されることになります。
vimdiffを起動するとargv[0]にはvimdiffが渡され、 普通にvimを起動したときにはvimが渡されることになります。 vimは「main関数に渡されたargv[0]がvimdiffだったら、-dオプションが指定されたときと同じように振る舞う」というようなことをやっているわけですね。
以下のようなC言語のプログラムを書いてこの挙動を確認してみました。
my-vim.c:
1#include &amp;lt;libgen.h&amp;gt;2#include &amp;lt;stdio.h&amp;gt;3#include &amp;lt;string.h&amp;gt;4 5int main(int argc, char *argv[]) { 6if (argc &amp;lt; 1) return 1; 7printf(&amp;#34;my-vim.</description>
    </item>
    
    <item>
      <title>ELVM Scratch 3.0 backend</title>
      <link>https://algon-320.github.io/posts/elvm-scratch-backend/</link>
      <pubDate>Sat, 12 Dec 2020 00:00:00 +0900</pubDate>
      
      <guid>https://algon-320.github.io/posts/elvm-scratch-backend/</guid>
      <description>この記事は 言語実装 Advent Calendar 2020 の12日目の記事です。 昨日はfukkunさんの「Lazy Code Motion」でした。 明日はelpinalさんの「モジュールのパターンマッチ・Focused Logic」です。
はじめに こんにちは。algonです。
今年の4月頃にScratchで遊んでいて、そのときにELVMのScratch 3.0のバックエンドを実装しました。 この記事では
 Scratchについて ELVMについて どのようにScratchバックエンドを実装したか  などについて紹介したいと思います。
Scratchとは ScratchはMIT Media Lab Lifelong Kindergarten Groupによって開発されているビジュアルプログラミング言語とその開発環境です。 ブロック状のパーツをグラフィカルに組み合わせていくことで直感的にプログラミングすることができます。
簡単な例を示すと、「1秒毎に変数をインクリメントして表示する」プログラムは以下のように実装できます。 (こちらから実行することができます。)
   1秒毎に変数をインクリメントし、その値を表示するプログラム   このプログラムでは、緑色の旗ボタンをクリックすると実行が始まり、 1秒毎に「へんすう」がインクリメントされながら吹き出しの中にその値が表示されます。
Scratchでは、このような簡単なプログラムはもちろん、 ブロック崩しのようなゲームからLISP処理系まで、 基本的には何でもつくることができます。
開発環境 Scratchの開発環境は公式サイトから利用でき、Webブラウザさえあれば簡単に遊ぶことができます。 作ったプログラムを共有しないのであればログインすら不要です。
Scratchエディタ
言語について Scratchでは「緑色の旗ボタンがクリックされたタイミング」や「キーボードの〜キーが押されたタイミング」 などのイベントに応じて動作するスクリプトを記述することによってプログラムを行います。
データ型 Scratchのデータには数値、文字列、真偽値の3種類があります。 数値と文字列はどちらも同じ形のブロックで表され、必要に応じてキャストが行われます1。
ブロック Scratchでは以下に挙げるようなブロックを組み合わせることでプログラミングを行います。 ブロックの機能によって形や色が分けられています。 ブロックの形が合わないような繋ぎ方はできなくなっており、これによってシンタックスエラーを回避しています。
イベントブロック 上部が丸くなっているブロックは「ハットブロック」と呼ばれ、 対応するイベントが発生するとこれらのブロックから実行が開始されます。   イベント関連のブロックの例   コントロールブロック 条件分岐やループを行うためのブロックです。   制御関連のブロックの例   数値演算 数値演算を行うブロックです。   数値演算関連のブロックの例   四則演算の他に、四捨五入や数学系の関数も用意されています。 ビット演算はありません。</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://algon-320.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://algon-320.github.io/about/</guid>
      <description>こんにちは!
Contact Me  GitHub: algon-320 Twitter: @algon_320 E-mail: algon.0320@gmail.com  </description>
    </item>
    
  </channel>
</rss>
